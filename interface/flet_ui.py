import time
import flet as ft
from core.scanner import ZapScanner
from core.report import generate_html_report
import webbrowser
import requests
import os


# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
COLORS = {
    "bg_primary": "#0A0E17",
    "bg_card": "#1A1F2E",
    "primary": "#7B68EE",
    "secondary": "#8b42ff",
    "text_primary": "#FFFFFF",
    "text_secondary": "#B0B0B0",
    "success": "#00FF88",
    "warning": "#FFAA00",
    "error": "#FF4444"
}

help_text = """
–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∞–π—Ç—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ OWASP ZAP.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚∏ª‚∏ª‚∏ª‚∏ª
‚ûô  –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ SPIDER
‚ûô  –ü–æ–∏—Å–∫ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π (XSS, SQLi –∏ –¥—Ä)
‚ûô  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ 

–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:
‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª
‚ûô  –ü–µ—Ä–µ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ZAP –∑–∞–ø—É—â–µ–Ω: docker-compose up -d
‚ûô  –ù–ï –°–ö–ê–ù–ò–†–£–ô–¢–ï –°–ê–ô–¢–´ –ë–ï–ó –†–ê–ó–†–ï–®–ï–ù–ò–Ø 
‚ûô  –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://testhtml5.vulnweb.com

–û —Ä–µ–∂–∏–º–∞—Ö —Ä–∞–±–æ—Ç—ã:
‚∏ª‚∏ª‚∏ª‚∏ª‚∏ª
‚ûô  –ë—ã—Å—Ç—Ä–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–æ 5 –º–∏–Ω—É—Ç) -> –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–æ –¥–µ—Å—è—Ç–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤. –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
‚ûô  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–æ 10 –º–∏–Ω—É—Ç) -> –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ –¥–≤–∞–¥—Ü–∞—Ç–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤. 
‚ûô  –ü–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–æ 20 –º–∏–Ω—É—Ç) -> —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–æ –¥–≤–∞–¥—Ü–∞—Ç–∏ –ø—è—Ç–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

‚öù –ü—Ä–æ–µ–∫—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏, 2025 ‚öù
"""


class VulnerabilityScannerUI:
    def __init__(self, page: ft.Page):
        self.page = page
        self.setup_page()
        self.scan_history = self.load_history()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.create_ui()

    # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    def load_history(self):
        try:
            history = self.page.client_storage.get('scan_history')
            return  history if history else []
        except:
            return []

    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é
    def save_history(self):
        try:
            self.page.client_storage.set('scan_history', self.scan_history)
        except Exception as e:
            print(f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ {e}')

    # –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
    def add_history(self, url: str, vulnerabilities: list, scan_mode: str, duration: float):
        history_item = {
            'id': int(time.time()),
            'timestamp': time.time(),
            'date': time.strftime('%d.%m.%Y %H:%M'),
            'url': url,
            'scan_mode': scan_mode,
            'duration': duration,
            'vulnerabilities_count': len(vulnerabilities),
            'risk_stats': self._calculate_status(vulnerabilities),
            'vulnerabilities': vulnerabilities[:5]  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–≤—ã–µ 5
        }
        self.scan_history.append(history_item)

        if len(self.scan_history) > 10:
            self.scan_history = self.scan_history[-10:]
        self.save_history()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∏—Å–∫–∞–º
    def _calculate_status(self, vulnerabilities):
        status = {'High':0, 'Medium': 0, 'Low': 0}
        for vuln in vulnerabilities:
            risk = vuln.get('risk', 'Low')
            if risk in status:
                status[risk] += 1
        return status

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é
    def show_history(self, e):
        if not self.scan_history:
            content = ft.Container(
                content=ft.Column([
                    ft.Icon(ft.Icons.HISTORY, size=40, color=COLORS['text_secondary']),
                    ft.Text('–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É—Å—Ç–∞', color=COLORS['text_secondary'],
                            text_align=ft.TextAlign.CENTER)
                ], horizontal_alignment=ft.CrossAxisAlignment.CENTER),
                padding=20
            )
        else:
            history_items = []

            for scan in reversed(self.scan_history):
                if scan['risk_stats']['High'] > 0:
                    color = COLORS['error']
                    icon = ft.Icons.WARNING
                elif scan['risk_stats']['Medium'] > 0:
                    color = COLORS['warning']
                    icon = ft.Icons.INFO
                else:
                    color = COLORS['success']
                    icon = ft.Icons.CHECK_CIRCLE

                history_item = ft.Card(
                    content=ft.Container(
                        content=ft.Column([
                            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –∏–∫–æ–Ω–∫–∞, URL, –¥–∞—Ç–∞
                            ft.Row([
                                ft.Icon(icon, color=color, size=20),
                                ft.Text(scan['url'],
                                        color=COLORS["text_primary"],
                                        weight=ft.FontWeight.BOLD,
                                        expand=True),
                                ft.Text(scan['date'],
                                        color=COLORS["text_secondary"],
                                        size=12)
                            ]),

                            # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            ft.Row([
                                ft.Text(f"üî¥ {scan['risk_stats']['High']} ", color=COLORS["error"]),
                                ft.Text(f"üü° {scan['risk_stats']['Medium']} ", color=COLORS["warning"]),
                                ft.Text(f"üîµ {scan['risk_stats']['Low']} ", color=COLORS["secondary"]),
                                ft.Text(f"‚Ä¢ {scan['scan_mode']}", color=COLORS["text_secondary"], size=12),
                                ft.Container(expand=True),
                                ft.Text(f"{scan['duration']:.1f}—Å", color=COLORS["text_secondary"], size=12)
                            ]),

                            # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                            ft.Row([
                                ft.TextButton(
                                    "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å",
                                    icon=ft.Icons.PLAY_ARROW,
                                    # on_click=lambda e, url=scan['url']: self.rescan_from_history(url)
                                ),
                                ft.TextButton(
                                    "–ü–æ–¥—Ä–æ–±–Ω–µ–µ",
                                    icon=ft.Icons.VISIBILITY,
                                    # on_click=lambda e, scan_id=scan['id']: self.show_scan_details(scan_id)
                                ),
                            ])
                        ], spacing=8),
                        padding=15,
                        bgcolor=ft.Colors.with_opacity(0.05, color)
                    ),
                    elevation=2
                )
                history_items.append(history_item)

            content = ft.Column(
                controls=history_items,
                scroll=ft.ScrollMode.ADAPTIVE,
                height=400
            )

        dlg = ft.AlertDialog(
            title=ft.Row([
                ft.Icon(ft.Icons.HISTORY, color=COLORS["primary"]),
                ft.Text("–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", color=COLORS["text_primary"])
            ]),
            content=content,
            actions=[
                ft.TextButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
                              on_click=self.clear_history,
                              style=ft.ButtonStyle(color=COLORS["error"])),
                ft.TextButton("–ó–∞–∫—Ä—ã—Ç—å",
                              on_click=lambda e: self.page.close(dlg)),
            ],
            actions_alignment=ft.MainAxisAlignment.END
        )
        self.page.open(dlg)

    def rescan_from_history(self, url, dlg=None):
        """–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏"""
        self.page.close(dlg)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏—Å—Ç–æ—Ä–∏–∏
        self.url_field.value = url
        self.page.update()
        self.start_scan(None)  # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

    def clear_history(self, e, dlg=None):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
        self.scan_history = []
        self.save_history()
        self.page.close(dlg)
        self.show_snackbar("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")

    def show_snackbar(self, message: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        self.page.snack_bar = ft.SnackBar(content=ft.Text(message))
        self.page.snack_bar.open = True
        self.page.update()


    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
    def check_site_availability(self, url: str) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞
            self.progress_text.value = "–ü—Ä–æ–≤–µ—Ä–∫–∞..."
            self.page.update()

            # –î–æ–±–∞–≤–ª—è–µ–º User-Agent —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
            response = requests.get(url, timeout=10, verify=False)

            if response.status_code == 200:
                return True, "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"
            else:
                return False, f"‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})"
        except requests.exceptions.ConnectionError:
            return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∞–π—Ç—É"
        except requests.exceptions.Timeout:
            return False, "‚ùå –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (10 —Å–µ–∫)"
        except requests.exceptions.MissingSchema:
            return False, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL"
        except requests.exceptions.InvalidURL:
            return False, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL"
        except requests.exceptions.RequestException as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"
        except Exception as e:
            return False, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"


    def setup_page(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.page.window.width = 600
        self.page.window.height = 800
        self.page.window.min_width = 550
        self.page.window.max_width = 800
        self.page.window.min_height = 700
        self.page.window.max_height = 1000
        self.page.window.resizable = False
        self.page.window.title = "Vulnerability Scanner - OWASP ZAP"
        self.page.bgcolor = COLORS["bg_primary"]
        self.page.padding = 20
        self.page.theme_mode = ft.ThemeMode.DARK

    def create_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ft.Container(
            content=ft.Column([
                ft.Row([
                    ft.Icon(ft.Icons.SECURITY, color=COLORS["primary"], size=30),
                    ft.Text("Vulnerability Scanner",
                            size=28,
                            weight=ft.FontWeight.BOLD,
                            color=COLORS["text_primary"])
                ], alignment=ft.MainAxisAlignment.CENTER),
                ft.Text("OWASP ZAP Security Testing Tool",
                        size=14,
                        color=COLORS["text_secondary"],
                        text_align=ft.TextAlign.CENTER)
            ], spacing=5),
            margin=ft.margin.only(bottom=20)
        )

        self.scanning_indicator = ft.ProgressRing(
            visible=False, color=COLORS['primary'], stroke_width=3
        )

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ URL
        self.url_field = ft.TextField(
            label="URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
            hint_text="https://example.com",
            prefix_icon=ft.Icons.LINK,
            border_color=COLORS["primary"],
            focused_border_color=COLORS["secondary"],
            cursor_color=COLORS["primary"],
            text_style=ft.TextStyle(color=COLORS["text_primary"]),
            label_style=ft.TextStyle(color=COLORS["text_secondary"]),
            hint_style=ft.TextStyle(color=COLORS["text_secondary"]),
            on_submit=self.start_scan,
            expand=True
        )
        # –í—ã–±–æ—Ä –≥–ª—É–±–∏–Ω—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_mode = ft.Dropdown(
            label="–ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
            hint_text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª—É–±–∏–Ω—É",
            options=[
                ft.dropdown.Option("fast", "–ë—ã—Å—Ç—Ä–æ–µ (3-5 –º–∏–Ω)"),
                ft.dropdown.Option("medium", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ (5-10 –º–∏–Ω)"),
                ft.dropdown.Option("deep", "–ü–æ–ª–Ω–æ–µ (10-25 –º–∏–Ω)"),
            ],
            value="fast",
            border_color=COLORS["primary"],
            focused_border_color=COLORS["secondary"],
            text_style=ft.TextStyle(color=COLORS["text_primary"]),
            label_style=ft.TextStyle(color=COLORS["text_secondary"]),
            expand=True
        )

        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_button = ft.ElevatedButton(
            content=ft.Row([
                ft.Icon(ft.Icons.PLAY_ARROW, color=COLORS["bg_primary"]),
                ft.Text("–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", color=COLORS["bg_primary"], weight=ft.FontWeight.BOLD)
            ], alignment=ft.MainAxisAlignment.CENTER),
            on_click=self.start_scan,
            style=ft.ButtonStyle(
                bgcolor=COLORS["primary"],
                color=COLORS["bg_primary"],
                padding=20,
                overlay_color=COLORS["secondary"],
            ),
            expand=True
        )

        # –ü—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar = ft.ProgressBar(
            value=0,
            color=COLORS["primary"],
            bgcolor=COLORS["bg_card"]
        )

        self.status_text = ft.Text("–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", size=16, color=COLORS["text_secondary"])
        self.progress_text = ft.Text("", size=18, weight=ft.FontWeight.BOLD, color=COLORS["primary"])
        self.error_text = ft.Text("", color=COLORS["error"], size=14)

        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_area = ft.Column(
            scroll=ft.ScrollMode.ADAPTIVE,
            spacing=10,
            expand=True
        )

        # –ö–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
        self.help_icon = ft.IconButton(
            icon=ft.Icons.HELP_OUTLINE,
            icon_color=COLORS["text_secondary"],
            tooltip='–°–ø—Ä–∞–≤–∫–∞',
            on_click=self.show_help
        )

        # –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.history_icon = ft.IconButton(
            icon=ft.Icons.HISTORY,
            icon_color=COLORS['text_secondary'],
            tooltip='–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
            on_click=self.show_history
        )

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_card = ft.Card(
            content=ft.Container(
                content=ft.Column([
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ —Å–ø—Ä–∞–≤–∫–∏
                    ft.Row([
                        ft.Container(expand=True),
                        self.history_icon,
                        self.help_icon
                    ]),
                    header,

                    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
                    ft.Container(
                        content=ft.Column([
                            # ft.Text("–¶–µ–ª—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", color=COLORS["text_primary"], size=16),
                            self.url_field,
                            ft.Container(height=5),
                            # ft.Text('–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:', color=COLORS['text_primary'], size=16),
                            self.scan_mode
                        ], spacing=10)
                    ),

                    # –ö–Ω–æ–ø–∫–∞ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
                    ft.Container(
                        content=ft.Column([
                            self.scan_button,
                            ft.Container(height=10),
                            self.progress_bar,
                            ft.Row([self.status_text, ft.Container(expand=True), self.progress_text]),
                            self.error_text
                        ], spacing=5)
                    ),

                    ft.Divider(color=COLORS["bg_card"], height=10),

                    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    ft.Container(
                        content=ft.Column([
                            ft.Row([
                                ft.Icon(ft.Icons.FIND_IN_PAGE, color=COLORS["primary"]),
                                ft.Text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                                        size=20,
                                        color=COLORS["text_primary"],
                                        weight=ft.FontWeight.BOLD)
                            ]),
                            ft.Container(
                                content=self.results_area,
                                height=300
                            )
                        ], spacing=15)
                    )
                ], spacing=20),
                padding=30,
                bgcolor=COLORS["bg_card"],
                border_radius=15
            ),
            elevation=10
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.page.add(
            ft.Column([
                main_card
            ], expand=True)
        )

    def show_help(self, e):
        dlg = ft.AlertDialog(
            title=ft.Text('–°–ø—Ä–∞–≤–∫–∞'),
            content=ft.Text(help_text, selectable=True),
            actions=[ft.TextButton('–ó–∞–∫—Ä—ã—Ç—å', on_click=lambda e: self.page.close(dlg))],
            actions_alignment=ft.MainAxisAlignment.END
        )
        self.page.open(dlg)

    def close_dialog(self, dlg):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        dlg.open = False
        self.page.update()

    def show_error(self, message: str):
        self.error_text.value = message
        self.page.update()

    def validate_url(self, url: str) -> bool:
        if not url:
            self.show_error("–ü–æ–ª–µ URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return False
        if not url.startswith(("http://", "https://")):
            self.show_error("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return False

        try:
            from urllib.parse import urlparse
            import re
            parsed = urlparse(url)

            if not parsed.netloc:
                self.show_error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL')
                return False

            local_host = ['localhost', '127.0.0.1', '192.168.', '172.16.']
            if any(host in parsed.netloc for host in local_host):
                self.show_error('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ')
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞ (–±–∞–∑–æ–≤–∞—è)
            domain_pattern = r'^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'
            if not re.match(domain_pattern, parsed.netloc):
                self.show_error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞")
                return False

        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return False
        return True

    def clear_results(self):
        self.results_area.controls.clear()
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        scan_mode = self.scan_mode.value
        mode_name = {
            'fast': '–ë—ã—Å—Ç—Ä—ã–π',
            'medium': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
            'deep': '–ü–æ–ª–Ω—ã–π'
        }
        mode_display = mode_name.get(scan_mode, scan_mode)
        self.status_text.value = f'{mode_display} | –ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é'
        self.progress_text.value = ""
        self.error_text.value = ""
        self.progress_bar.value = 0
        self.page.update()

    def update_progress(self, stage: str, percent: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ UI"""
        stage_names = {
            "spider": "üï∑Ô∏è –û–±—Ö–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–∞–π—Ç–∞",
            "ascan": "‚öî –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"
        }
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        scan_mode = self.scan_mode.value
        mode_name = {
            'fast': '–ë—ã—Å—Ç—Ä—ã–π',
            'medium': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π',
            'deep': '–ü–æ–ª–Ω—ã–π'
        }
        mode_display = mode_name.get(scan_mode, scan_mode)
        self.status_text.value = f'{mode_display} | {stage_names.get(stage, "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")}'
        self.progress_text.value = f"{percent}%"
        self.progress_bar.value = percent / 100
        self.page.update()

    def add_result(self, vuln: dict):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        risk_colors = {
            "High": COLORS["error"],
            "Medium": COLORS["warning"],
            "Low": COLORS["secondary"],
            "Informational": COLORS["text_secondary"]
        }

        color = risk_colors.get(vuln["risk"], COLORS["text_secondary"])
        risk_icon = ft.Icon(ft.Icons.WARNING, color=color, size=16)

        card = ft.Card(
            content=ft.Container(
                content=ft.Column([
                    ft.Row([
                        risk_icon,
                        ft.Text(f"{vuln['name'][:50]}",
                                weight="bold",
                                color=color,
                                size=13,
                                expand=True),
                        ft.Container(
                            content=ft.Text(vuln['risk'], color=color, weight="bold", size=10),
                            bgcolor=ft.Colors.with_opacity(0.2, color),
                            padding=ft.padding.symmetric(horizontal=6, vertical=2),
                            border_radius=4
                        )
                    ]),
                    ft.Text(f"URL: {vuln['url']}",
                            size=12,
                            color=COLORS["text_secondary"]),
                    ft.Text(vuln['description'][:150] + "...",
                            size=9,
                            color=COLORS["text_secondary"])
                ], spacing=6),
                padding=10,
                bgcolor=ft.Colors.with_opacity(0.05, color)
            ),
            elevation=1
        )
        self.results_area.controls.append(card)
        self.page.update()

    def open_report(self, report_path: str):
        if os.path.exists(report_path):
            webbrowser.open(f"file://{os.path.abspath(report_path)}")

    def start_scan(self, e):
        self.scanning_indicator.visible = True
        self.page.update()
        self.clear_results()
        url = self.url_field.value.strip()
        start_time = time.time()
        scan_mode = self.scan_mode.value  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è


        if not self.validate_url(url):
            return

        # –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ê–ô–¢–ê
        self.status_text.value = "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∞–π—Ç–∞..."
        self.page.update()

        is_available, message = self.check_site_availability(url)
        if not is_available:
            self.show_error(message)
            self.scanning_indicator.visible = False
            self.status_text.value = "‚ùå –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            return

        # –ï—Å–ª–∏ —Å–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.status_text.value = "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è..."
        self.page.update()

        # –ë–ª–æ–∫–∏—Ä—É–µ–º UI
        self.scan_button.disabled = True
        self.url_field.disabled = True
        self.scan_mode.disabled = True
        self.scan_button.content.controls[1].value = "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ..."
        self.page.update()

        try:
            scanner = ZapScanner()
            if not scanner.is_ready():
                self.show_error("‚ùå ZAP –Ω–µ –∑–∞–ø—É—â–µ–Ω! –í—ã–ø–æ–ª–Ω–∏—Ç–µ: docker-compose up -d")
                return

            # –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            vulnerabilities = scanner.scan(url, on_progress=self.update_progress, scan_mode=scan_mode)

            duration = time.time() - start_time
            self.add_history(url, vulnerabilities, scan_mode, duration)
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
            report_path = generate_html_report()
            self.status_text.value = f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            self.progress_text.value = "100%"

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç—á—ë—Ç–∞
            report_btn = ft.FilledButton(
                content=ft.Row([
                    ft.Icon(ft.Icons.ARTICLE, color=COLORS["bg_primary"]),
                    ft.Text("–û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á—ë—Ç", color=COLORS["primary"])
                ]),
                on_click=lambda e: self.open_report(report_path),
                style=ft.ButtonStyle(bgcolor=COLORS["success"])
            )
            self.results_area.controls.append(report_btn)

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if not vulnerabilities:
                self.results_area.controls.append(
                    ft.Container(
                        content=ft.Row([
                            ft.Icon(ft.Icons.CHECK_CIRCLE, color=COLORS["success"]),
                            ft.Text("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", color=COLORS["success"])
                        ]),
                        padding=15
                    )
                )
            else:
                risk_status = {}
                for vuln in vulnerabilities:
                    risk = vuln['risk']
                    risk_status[risk] = risk_status.get(risk, 0) + 1

                stats_text = " | ".join([f"{risk}: {count}" for risk, count in risk_status.items()])
                self.results_area.controls.append(
                    ft.Container(
                        content=ft.Text(f'–ù–∞–π–¥–µ–Ω–æ {len(vulnerabilities)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π ({stats_text})',
                                        color=COLORS["text_primary"]),
                        bgcolor=COLORS['bg_card'],
                        padding=10,
                        border_radius=5
                    )
                )
                for vuln in vulnerabilities[:15]:
                    self.add_result(vuln)

        except Exception as ex:
            self.show_error(f"üí• –û—à–∏–±–∫–∞: {str(ex)}")
        finally:
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º UI
            self.scanning_indicator.visible = False
            self.scan_button.disabled = False
            self.url_field.disabled = False
            self.scan_mode.disabled = False
            self.scan_button.content.controls[1].value = "–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
            self.page.update()


def main(page: ft.Page):
    VulnerabilityScannerUI(page)


if __name__ == "__main__":
    ft.app(
        target=main,
        view=ft.AppView.FLET_APP,
    )