# core/scanner.py
import time
import logging
from typing import List, Dict, Any
from zapv2 import ZAPv2

logger = logging.getLogger(__name__)

class ZapScanner:
    def __init__(self, api_url: str = "http://localhost:8080", api_key: str = None):
        self.zap = ZAPv2(apikey=api_key, proxies={'http': api_url, 'https': api_url})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
    def is_ready(self) -> bool:
        try:
            version = self.zap.core.version
            logger.info(f"‚úÖ OWASP ZAP –∑–∞–ø—É—â–µ–Ω. –í–ï–†–°–ò–Ø: {version}")
            return True
        except Exception as e:
            logger.error(f"‚ùå ZAP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e} ‚ùå")
            return False

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    def scan(self, target_url: str, timeout: int = 600) -> List[Dict[str, Any]]:
        if not target_url.startswith(('http://', 'https://')):
            raise ValueError("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")

        # SPIDER SCAN
        logger.info(f"–ó–∞–ø—É—Å–∫ üï∑SPIDERüï∑...–û–±—Ö–æ–¥ —Å–∞–π—Ç–∞ -> {target_url}")
        spider_result = self.zap.spider.scan(target_url)
        if not spider_result.isdigit():
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ üï∑SPIDERüï∑: {spider_result} ‚ùå")
            return []
        spider_id = spider_result
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è SPIDER
        print("", end="", flush=True)

        while True:
            try:
                spider_stat = int(self.zap.spider.status(spider_id))

                # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                print(f"\rüîç –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ACTIVE SCAN -> {spider_stat}%", end="", flush=True)

                if spider_stat >= 100:
                    print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    logger.info("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SPIDER –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    print()
                    break
                time.sleep(2)

            except Exception as e:
                print()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ SPIDER: {e} ‚ùå")
                break

        # ACTIVE SCAN
        logger.info("–ó–∞–ø—É—Å–∫ ACTIVE SCAN...–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        ascan_result = self.zap.ascan.scan(target_url, recurse=True)
        if not ascan_result.isdigit():
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ACTIVE SCAN: {ascan_result} ‚ùå")
            return []
        ascan_id = ascan_result
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        waited = 0
        print("", end="", flush=True)

        while True:
            try:
                status_str = self.zap.ascan.status(ascan_id)
                status_percent = int(status_str)

                # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
                print(f"\rüîç –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ACTIVE SCAN -> {status_percent}%", end="", flush=True)

                if status_percent >= 100:
                    print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    logger.info("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ACTIVE SCAN –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    break
                time.sleep(5)
                waited += 5

                if waited > timeout:
                    print()
                    logger.warning(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ({timeout} —Å–µ–∫)")
                    break

            except Exception as e:
                print()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ ACTIVE SCAN: {e} ‚ùå")
                break

        alerts = self.zap.core.alerts(baseurl=target_url)
        return [
            {
                "name": a.get("name"),
                "risk": a.get("risk"),
                "url": a.get("url"),
                "description": a.get("description"),
                "solution": a.get("solution")
            }
            for a in alerts
        ]