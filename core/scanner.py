# core/scanner.py
import re
import time
import logging
import urllib.parse
from typing import List, Dict, Any, Callable, Optional
from zapv2 import ZAPv2

logger = logging.getLogger(__name__)

class ZapScanner:
    def __init__(self, api_url: str = "http://localhost:8080", api_key: str = None):
        self.zap = ZAPv2(apikey=api_key, proxies={'http': api_url, 'https': api_url})

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–µ—Ä–∞
    def is_ready(self) -> bool:
        try:
            version = self.zap.core.version
            logger.info(f"‚úÖ OWASP ZAP –∑–∞–ø—É—â–µ–Ω. –í–ï–†–°–ò–Ø: {version}")
            return True
        except Exception as e:
            logger.error(f"‚ùå ZAP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e} ‚ùå")
            return False

    # def disable_slow_scanners(self):
    #     """–û—Ç–∫–ª—é—á–∞–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Å–∫–∞–Ω–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    #     try:
    #         # ID –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∏ —Ä–µ–¥–∫–æ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤
    #         slow_scanner_ids = [
    #             "40012",  # Buffer Overflow
    #             "40014",  # Parameter Tampering
    #             "40016",  # Cross-Domain Misconfiguration
    #             "40017",  # Server Side Include
    #             "40018",  # CRLF Injection
    #             "40026",  # HTTP Response Splitting
    #             "40027",  # Timestamp Disclosure
    #             "40028",  # Username Hash Disclosure
    #             "40032",  # XPath Injection
    #             "40033",  # XSLT Injection
    #         ]
    #
    #         disabled_count = 0
    #         for scanner_id in slow_scanner_ids:
    #             try:
    #                 self.zap.ascan.disable_scanners(scanner_id)
    #                 disabled_count += 1
    #             except Exception:
    #                 # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Å–∫–∞–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω
    #                 continue
    #
    #         logger.info(f"‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ {disabled_count} –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤")
    #
    #     except Exception as e:
    #         logger.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–µ—Ä—ã {e}')

    def diagnose_scanners(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤"""
        try:
            scanners = self.zap.ascan.scanners()

            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Å–∫–∞–Ω–µ—Ä—ã
            critical_scanners = [
                "SQL Injection",
                "Cross Site Scripting",
                "XSS",
                "Path Traversal",
                "OS Command Injection",
                "Code Injection",
                "File Inclusion"
            ]

            enabled_critical = []
            disabled_critical = []

            for scanner in scanners:
                name = scanner.get('name', '')
                if any(crit in name for crit in critical_scanners):
                    if scanner.get('enabled') == 'true':
                        enabled_critical.append(name)
                    else:
                        disabled_critical.append(name)

            logger.info(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –°–ö–ê–ù–ï–†–´:")
            logger.info(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ: {len(enabled_critical)}")
            for scanner in enabled_critical:
                logger.info(f"      - {scanner}")

            logger.info(f"‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ: {len(disabled_critical)}")
            for scanner in disabled_critical[:5]:  # –ü–µ—Ä–≤—ã–µ 5
                logger.info(f" - {scanner}")

            return len(enabled_critical) > 0

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∫–∞–Ω–µ—Ä–æ–≤: {e}")
            return False

    def _filter_alerts(self, alerts, scan_mode: str):
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        filtered = []

        # –†–ê–°–®–ò–†–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –õ–û–ñ–ù–´–• –°–†–ê–ë–ê–¢–´–í–ê–ù–ò–ô
        false_positives = [
            "Server Leaks Version Information",
            "Server Leaks Information via",
            "X-Powered-By Header",
            "X-AspNet-Version Response Header",
            "X-Debug-Token Link",
            "Application Error Disclosure",
            "Content Security Policy (CSP) Header Not Set",
            "X-Content-Type-Options Header Missing",
            "X-Frame-Options Header Not Set",
            "Missing Anti-clickjacking Header",
            "Cookie No HttpOnly Flag",
            "Cookie Without Secure Flag",
            "Absence of Anti-CSRF Tokens",
            "Cross-Domain JavaScript Source File Inclusion",
            "Private IP Disclosure",
            "Timestamp Disclosure",
            "Username Hash Disclosure",
        ]

        for alert in alerts:
            risk = alert.get("risk", "Informational")
            name = alert.get("name", "Unknown")

            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            if risk == "Informational":
                continue

            # –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å—É–ø–µ—Ä –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
            if scan_mode == "fast":
                # –¢–æ–ª—å–∫–æ High —Ä–∏—Å–∫–∏ –∏ —Ä–µ–∞–ª—å–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
                if risk == "High":
                    pass
                elif risk == "Medium":
                    important_medium = [
                        "SQL Injection", "XSS", "Path Traversal",
                    "Command Injection", "File Upload"
                    ]
                    if not any(imp in name for imp in important_medium):
                        continue
                else:
                    continue

            # –î–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–µ–∂–∏–º–∞
            elif scan_mode == "medium":
                # High + Medium, –Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                if risk not in ["High", "Medium"]:
                    continue

            # –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ - —Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —è–≤–Ω—ã–µ –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            elif scan_mode == "deep":
                if any(fp in name for fp in false_positives):
                    continue


            # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã - –¥–æ–±–∞–≤–ª—è–µ–º
            filtered.append({
                "name": name,
                "risk": risk,
                "url": alert.get("url", ""),
                "description": alert.get("description", "")[:200],  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
                "solution": alert.get("solution", "")
            })

        return filtered

    def enable_missing_critical_scanners(self):
        """–í–∫–ª—é—á–∞–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∫–∞–Ω–µ—Ä—ã"""
        try:
            scanners = self.zap.ascan.scanners()

            must_enable = [
                "Cross Site Scripting",
                "XSS",
                "SQL Injection"  # –±–∞–∑–æ–≤—ã–π SQL injection
            ]

            enabled_count = 0
            for scanner in scanners:
                name = scanner.get('name', '')
                scanner_id = scanner.get('id', '')

                # –í–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ —Å–∫–∞–Ω–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ò –æ—Ç–∫–ª—é—á–µ–Ω
                if any(pattern in name for pattern in must_enable):
                    if scanner.get('enabled') != 'true':
                        try:
                            self.zap.ascan.enable_scanners(scanner_id)
                            enabled_count += 1
                            logger.info(f"‚úÖ –í–ö–õ–Æ–ß–ï–ù: {name}")
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å {name}: {e}")

            if enabled_count > 0:
                logger.info(f"üéØ –í–∫–ª—é—á–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤: {enabled_count}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è —Å–∫–∞–Ω–µ—Ä–æ–≤: {e}")

    # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    def scan(
        self,
        target_url: str,
        scan_mode: str = "fast",
        on_progress: Optional[Callable[[str, int], None]] = None
    ) -> List[Dict[str, Any]]:

        depth_configs = {
            'fast': {
                'max_duration': 3,  # 3 –º–∏–Ω—É—Ç
                'max_children': 10,  # 10 –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
                'max_depth': 2,
                'attack_strength': 'MEDIUM',
                'alert_threshold': 'MEDIUM',
                'timeout': 180,
                'disable_slow_scanners': True
            },
            'medium': {
                'max_duration': 10,  # 10 –º–∏–Ω—É—Ç
                'max_children': 20,  # 20 –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
                'max_depth': 3,
                'attack_strength': 'MEDIUM',
                'alert_threshold': 'MEDIUM',
                'timeout': 600,
                'disable_slow_scanners': False
            },
            'deep': {
                'max_duration': 25,  # 25 –º–∏–Ω—É—Ç
                'max_children': 30,  # 30 –¥–æ—á–µ—Ä–Ω–∏—Ö —É–∑–ª–æ–≤
                'max_depth': 4,
                'attack_strength': 'HIGH',
                'alert_threshold': 'LOW',
                'timeout': 1500,
                'disable_slow_scanners': False
            }
        }
        has_critical_scanners = self.diagnose_scanners()
        if not has_critical_scanners:
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤!")
        config = depth_configs.get(scan_mode, depth_configs['fast'])
        self.enable_missing_critical_scanners()

        try:
            # –ù–ê–°–¢–†–û–ô–ö–ò SPIDER
            self.zap.spider.set_option_max_children(config["max_children"])
            self.zap.spider.set_option_max_depth(config["max_depth"])

            # –ù–ê–°–¢–†–û–ô–ö–ò ACTIVE SCAN
            self.zap.ascan.set_option_max_scan_duration_in_mins(config["max_duration"])

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–µ—Ä–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–Ω–∞—á–µ–Ω–∏–π –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            self.zap.ascan.option_attack_strength = "HIGH"  # –í—Å–µ–≥–¥–∞ HIGH –¥–ª—è —Ç–µ—Å—Ç–∞!
            self.zap.ascan.option_alert_threshold = "LOW"  # –í—Å–µ–≥–¥–∞ LOW –¥–ª—è —Ç–µ—Å—Ç–∞!

            logger.info("‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: HIGH –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å, LOW –ø–æ—Ä–æ–≥")


           # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —Å–∫–∞–Ω–µ—Ä–æ–≤
           #  if config['disable_slow_scanners']:
           #      self.disable_slow_scanners()

            logger.info(f'–ü—Ä–∏–º–µ–Ω–µ–Ω —Ä–µ–∂–∏–º {scan_mode}: {config['max_duration']}, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ {config['max_depth']}')


        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

        if not target_url.startswith(('http://', 'https://')):
                raise ValueError("URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")

        parsed = urllib.parse.urlparse(target_url)
        local_patterns = ['localhost', '127.0.0.1', '192.168.', 'fc00:']
        if any(pattern in parsed.netloc for pattern in local_patterns):
            raise ValueError('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ')

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –¥–æ–º–µ–Ω—á–∏–∫
        if not re.match(r'^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$', parsed.netloc):
            raise ValueError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞')

        # SPIDER SCAN
        logger.info(f"–ó–∞–ø—É—Å–∫ üï∑SPIDERüï∑...–û–±—Ö–æ–¥ —Å–∞–π—Ç–∞ -> {target_url}")
        if on_progress:
            on_progress("spider", 0)
        spider_result = self.zap.spider.scan(target_url)
        if not spider_result.isdigit():
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ üï∑SPIDERüï∑: {spider_result} ‚ùå")
            return []
        spider_id = spider_result

        while True:
            try:
                spider_stat = int(self.zap.spider.status(spider_id))

                # –≤–º–µ—Å—Ç–æ print
                if on_progress:
                    on_progress("spider", spider_stat)
                else:
                    print(f"\rüîç –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è SPIDER -> {spider_stat}%", end="", flush=True)

                if spider_stat >= 100:
                    if not on_progress:
                        print()  # –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª–∏
                    logger.info("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SPIDER –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    break
                time.sleep(2)

            except Exception as e:
                if not on_progress:
                    print()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ SPIDER: {e} ‚ùå")
                break

        # ACTIVE SCAN
        logger.info("–ó–∞–ø—É—Å–∫ ACTIVE SCAN...–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...")
        ascan_result = self.zap.ascan.scan(target_url, recurse=True)
        if not ascan_result.isdigit():
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ACTIVE SCAN: {ascan_result} ‚ùå")
            return []
        ascan_id = ascan_result

        #  –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥–≥–æ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ–¥ —ç—Ç–æ
        start_time = time.time()

        scan_durations = {
            'fast': 180,  # 3 min
            'medium': 600,  # 10 min
            'deep': 1500   # 25 min
        }

        scan_duration = scan_durations.get(scan_mode, 600)

        while True:
            try:
                elapsed_time = time.time() - start_time
                zap_status = int(self.zap.ascan.status(ascan_id))

                time_progress = min((elapsed_time / scan_duration) * 100, 100)
                combined_progress = min(int((time_progress + zap_status) / 2), 100)

                # –ù–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
                final_progress = max(combined_progress, int(time_progress))

                if on_progress:
                    on_progress("active_scan", final_progress)
                else:
                    print(f"\rüîç –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ACTIVE SCAN -> {final_progress}%", end="", flush=True)

                # –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–≥–¥–∞ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –ò ZAP –±–ª–∏–∑–æ–∫ –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
                if elapsed_time >= scan_duration and zap_status >= 80:
                    if not on_progress:
                        print()
                    logger.info(f"‚úÖ {scan_mode} —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    break

                # –ò–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                if elapsed_time >= scan_duration * 1.2:  # +20% –∑–∞–ø–∞—Å–∞
                    if not on_progress:
                        print()
                    logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {scan_mode} —Ä–µ–∂–∏–º–∞")
                    break

                time.sleep(2)

            except Exception as e:
                if not on_progress:
                    print()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e} ‚ùå")
                break


            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        try:
            alerts = self.zap.core.alerts(baseurl=target_url)

            risk_distribution = {}
            for alert in alerts:
                risk = alert.get('risk', 'Informational')
                risk_distribution[risk] = risk_distribution.get(risk, 0) + 1

            logger.info(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ —Ä–∏—Å–∫–∞–º: {risk_distribution}")

            from collections import Counter
            alert_names = [alert.get('name', 'Unknown') for alert in alerts]
            common_alerts = Counter(alert_names).most_common(10)
            logger.info(f"üîù –¢–æ–ø-10 —Ç–∏–ø–æ–≤ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {common_alerts}")

            filtered_alerts = self._filter_alerts(alerts, scan_mode)

            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            filtered_stats = {}
            for alert in filtered_alerts:
                risk = alert.get("risk", "Unknown")
                filtered_stats[risk] = filtered_stats.get(risk, 0) + 1

            logger.info(f"‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_alerts)} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π {filtered_stats}")

            return filtered_alerts


        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e} ‚ùå")
            return []